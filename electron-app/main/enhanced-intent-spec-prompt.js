"use strict";
/**
 * Enhanced Intent Spec Prompt Generator
 * Leverages rich captured data including multiple selectors, DOM snapshots,
 * network patterns, timing, and 40+ event types for resilient automation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateEnhancedIntentSpecPrompt = generateEnhancedIntentSpecPrompt;
exports.generateComplexInteractionPrompt = generateComplexInteractionPrompt;
exports.generateFlowAnalysisPrompt = generateFlowAnalysisPrompt;
exports.generateSnippetValidationPrompt = generateSnippetValidationPrompt;
exports.generateVariableExtractionPrompt = generateVariableExtractionPrompt;
exports.generateRuntimeDecisionPrompt = generateRuntimeDecisionPrompt;
/**
 * Generate enhanced prompt that produces Intent Specs optimized for resilient execution
 * using the comprehensive data captured by our enhanced recording system
 */
function generateEnhancedIntentSpecPrompt(serializedRecording) {
    return "# Advanced Recording Analysis with Rich Context Data\n\nYou are analyzing a recording that captures COMPREHENSIVE interaction data including:\n- 40+ event types (clicks, double-clicks, drag-drop, clipboard, touch, media, storage)\n- Multiple selector strategies per element (8-10 alternatives)\n- DOM structure snapshots every 3 seconds\n- Network request patterns (main document loads)\n- Performance metrics (LCP, CLS, INP)\n- Timing intelligence between actions\n- Final screenshot capture\n- Tab context attribution\n\n## CRITICAL REQUIREMENT: Include ALL Captured Variables\n\n**MANDATORY**: You MUST extract ALL input fields from the recording as variables in the params array.\n- If the recording contains login (LOGIN_ID, username, email, password fields), you MUST include EMAIL_ADDRESS/USERNAME and PASSWORD variables\n- Include variables from EVERY step of the workflow, not just the final action\n- DO NOT skip authentication variables even if focusing on business logic\n- The params array must contain EVERY dynamic value that was typed or selected\n\n## Leverage Rich Data for Maximum Resilience\n\nUse the comprehensive data to create automation that:\n1. **Uses multiple selector strategies** - Elements have 8-10 selector alternatives\n2. **Understands page flow** - DOM snapshots show state transitions\n3. **Handles timing intelligently** - Use actual wait times between actions\n4. **Detects patterns** - Network requests reveal navigation patterns\n5. **Validates thoroughly** - Performance metrics indicate page readiness\n\n## Input Recording\n\n".concat(serializedRecording, "\n\n## Your Primary Task\n\nGenerate an Intent Spec with EXECUTABLE Playwright snippets that will work reliably without AI assistance.\n\n## Enhanced Intent Spec Format with Rich Context\n\nReturn ONLY valid JSON that leverages all captured data:\n\n```json\n{\n  \"name\": \"descriptive name\",\n  \"description\": \"what this automation accomplishes\",\n  \"url\": \"starting URL\",\n  \"params\": [\"PARAM_NAME\"],\n  \"executionStrategy\": {\n    \"primary\": \"snippet\",\n    \"aiUsagePercentage\": 10,\n    \"aiTriggers\": [\"validation\", \"dynamic_content\", \"error_recovery\"]\n  },\n  \"steps\": [\n    {\n      \"name\": \"human-readable step name\",\n      \"snippet\": \"await page.goto('url') // ACTUAL Playwright code\",\n      \"executionMethod\": \"snippet|ai|hybrid\",\n      \"category\": \"navigation|form|interaction|validation\",\n      \"skipConditions\": [\n        {\n          \"type\": \"url_match|element_exists|text_present\",\n          \"value\": \"condition to check\",\n          \"skipReason\": \"Already logged in\"\n        }\n      ],\n      \"skipNavigationStates\": [\"dashboard\", \"app\", \"home\"],\n      \"preFlightChecks\": [\n        {\n          \"selector\": \"primary CSS selector from recording\",\n          \"required\": true,\n          \"alternativeSelectors\": [\n            \"// USE ALL 8-10 SELECTORS FROM RECORDING DATA\",\n            \"#id-selector if available\",\n            \"[data-testid] if available\",\n            \"[aria-label] if available\",\n            \":nth-child() position selector\",\n            \"text-based selector\",\n            \"class combination selector\",\n            \"parent > child selector\",\n            \"sibling + selector\"\n          ]\n        }\n      ],\n      \"errorRecovery\": {\n        \"primaryStrategy\": \"retry|wait|refresh|use_ai\",\n        \"fallbackSnippet\": \"alternative Playwright code if primary fails\",\n        \"maxRetries\": 3\n      },\n      \"continueOnFailure\": false,\n      \"aiInstruction\": \"ONLY if executionMethod is 'ai': Natural language instruction\"\n    }\n  ],\n  \"validationSteps\": [\n    {\n      \"name\": \"verify success\",\n      \"snippet\": \"await expect(page.locator('.success')).toBeVisible()\",\n      \"executionMethod\": \"snippet\"\n    }\n  ]\n}\n```\n\n## Smart Snippet Generation Using Rich Data\n\n### Generate Snippets That Use Recording Intelligence:\n1. **Navigation** (100% reliable):\n   ```javascript\n   await page.goto('https://example.com/login')\n   ```\n\n2. **Form Fields** with multiple selector fallbacks:\n   ```javascript\n   // Try primary selector first, then alternatives from recording\n   const usernameSelectors = [\n     '#username',  // from recording data\n     '[name=\"username\"]',  // alternative from recording\n     'input[placeholder*=\"user\"]',  // text-based from recording\n   ];\n   for (const selector of usernameSelectors) {\n     try {\n       await page.fill(selector, '{{USERNAME}}');\n       break;\n     } catch (e) {\n       continue;\n     }\n   }\n   ```\n\n3. **Clicks** on predictable elements:\n   ```javascript\n   await page.click('button[type=\"submit\"]')\n   await page.getByRole('button', { name: 'Login' }).click()\n   ```\n\n4. **Waits** for specific conditions:\n   ```javascript\n   await page.waitForSelector('.dashboard', { timeout: 10000 })\n   await page.waitForLoadState('networkidle')\n   ```\n\n### ONLY Use AI (ai) for:\n1. **Content Validation**: \"Verify the invoice total matches expected amount\"\n2. **Dynamic Element Detection**: \"Find and click the newest item in the list\"\n3. **Visual Reasoning**: \"Check if the chart shows an upward trend\"\n4. **Error Recovery**: \"Handle unexpected popup or dialog\"\n\n### Use Hybrid (hybrid) for:\n1. Try snippet first, fall back to AI if it fails\n2. Complex multi-step operations that might have variations\n\n## Pre-Flight Checks\n\nFor EVERY step that interacts with elements, include preFlightChecks:\n\n```json\n\"preFlightChecks\": [\n  {\n    \"selector\": \"#login-button\",\n    \"required\": true,\n    \"alternativeSelectors\": [\n      \"button[type='submit']\",\n      \"button:has-text('Login')\",\n      \"[data-testid='login-btn']\"\n    ]\n  }\n]\n```\n\n## Skip Conditions\n\nCRITICAL: Add intelligent skip conditions to avoid redundant actions. For login/auth steps, ALWAYS analyze the target application to determine skip patterns:\n\n```json\n\"skipNavigationStates\": [\"app\", \"dashboard\", \"home\", \"workspace\", \"account\"],\n\"skipConditions\": [\n  {\n    \"type\": \"url_match\",\n    \"value\": \"[URL pattern that indicates logged in state]\",\n    \"skipReason\": \"Already in application\"\n  },\n  {\n    \"type\": \"element_exists\",\n    \"value\": \"[selector for user menu or logout button]\",\n    \"skipReason\": \"User interface shows authenticated state\"\n  },\n  {\n    \"type\": \"text_present\",\n    \"value\": \"[text that only appears when logged in]\",\n    \"skipReason\": \"Page content indicates authenticated session\"\n  }\n]\n```\n\nIMPORTANT: Analyze the actual recording to determine what indicates a logged-in state for that specific application!\n\n## Error Recovery Strategies\n\nFor each snippet-based step, define recovery:\n\n```json\n\"errorRecovery\": {\n  \"primaryStrategy\": \"retry\",\n  \"fallbackSnippet\": \"await page.getByText('Login').click()\",\n  \"maxRetries\": 3,\n  \"waitBeforeRetry\": 2000,\n  \"useAiAfterFailures\": true\n}\n```\n\n## Selector Priority (MOST to LEAST stable)\n\n1. **IDs**: `#unique-id`\n2. **Data attributes**: `[data-testid=\"submit\"]`\n3. **ARIA/Role selectors**: `page.getByRole('button', { name: 'Submit' })`\n4. **Stable classes**: `.login-submit-button`\n5. **Type + attributes**: `input[type=\"email\"][name=\"username\"]`\n6. **Text content**: `page.getByText('Continue')`\n7. **XPath**: AVOID unless absolutely necessary\n\n## Intelligent Variable Detection from Recording\n\nAnalyze the recording's typed values and form interactions to detect:\n- **Credentials**: Look for password fields, email inputs \u2192 {{USERNAME}}, {{PASSWORD}}, {{EMAIL_ADDRESS}}\n- **Personal Data**: Analyze form field names/labels \u2192 {{FIRST_NAME}}, {{LAST_NAME}}, {{PHONE_NUMBER}}\n- **Business Data**: Detect patterns in typed text \u2192 {{COMPANY_NAME}}, {{DEPARTMENT}}, {{EMPLOYEE_ID}}\n- **Dynamic Values**: Identify changing data \u2192 {{SEARCH_QUERY}}, {{DATE}}, {{AMOUNT}}\n- **System IDs**: Find unique identifiers \u2192 {{ORDER_ID}}, {{TRANSACTION_ID}}, {{SESSION_ID}}\n\nIMPORTANT: Use exact variable names that match UI detection patterns:\n- PASSWORD (not PASS or PWD)\n- EMAIL_ADDRESS (not EMAIL or MAIL)\n- PHONE_NUMBER (not PHONE or TEL)\n- FIRST_NAME and LAST_NAME (not NAME)\n\n## Rich Data Quality Checklist\n\nBefore returning the Intent Spec, verify:\n\u2705 **Selector Resilience**: Used ALL 8-10 selector alternatives from recording\n\u2705 **Timing Accuracy**: Incorporated actual wait times between actions\n\u2705 **DOM State Awareness**: Used snapshots to understand page transitions\n\u2705 **Network Intelligence**: Identified navigation patterns from requests\n\u2705 **Event Completeness**: Captured all interaction types (not just clicks)\n\u2705 **Performance Readiness**: Used metrics to ensure page stability\n\u2705 **Variable Detection**: Properly identified all dynamic values\n\u2705 **Tab Context**: Maintained proper tab/window attribution\n\u2705 **Final Validation**: Used screenshot data for success verification\n\n## Example High-Quality Step\n\n```json\n{\n  \"name\": \"Click login button\",\n  \"snippet\": \"await page.click('#login-btn')\",\n  \"executionMethod\": \"snippet\",\n  \"category\": \"interaction\",\n  \"preFlightChecks\": [{\n    \"selector\": \"#login-btn\",\n    \"required\": true,\n    \"alternativeSelectors\": [\n      \"button[type='submit']\",\n      \"button:has-text('Sign In')\"\n    ]\n  }],\n  \"errorRecovery\": {\n    \"primaryStrategy\": \"retry\",\n    \"fallbackSnippet\": \"await page.getByRole('button', { name: /log.?in/i }).click()\",\n    \"maxRetries\": 2\n  }\n}\n```\n\n## Analyze Recording Structure\n\nThe recording contains these rich data points per action:\n- **action**: The specific event type (click, dblclick, input, paste, drag, etc.)\n- **selectors**: Array of 8-10 alternative selectors\n- **elementInfo**: Tag, attributes, text content, position\n- **timing**: Timestamp and duration since last action\n- **context**: Page URL, title, viewport, tab ID\n- **dom_snapshot**: Full page structure at time of action\n- **network_activity**: Document loads and API calls\n- **performance**: LCP, CLS, INP metrics\n\nUse ALL this data to create the most resilient automation possible.");
}
/**
 * Generate a prompt specifically for analyzing complex interactions
 * like drag-drop, clipboard operations, and media playback
 */
function generateComplexInteractionPrompt(recording) {
    return "# Analyze Complex User Interactions\n\nThis recording contains advanced interaction types. Generate automation that handles:\n\n1. **Drag and Drop Operations**:\n   - Source and target element selectors\n   - File information if files were dropped\n   - Coordinate-based movements\n\n2. **Clipboard Operations**:\n   - Copy/Paste/Cut events with actual content\n   - Cross-application data transfer\n   - Format preservation\n\n3. **Media Interactions**:\n   - Play/Pause/Seek operations\n   - Volume and playback rate changes\n   - Fullscreen transitions\n\n4. **Touch/Mobile Events**:\n   - Swipe gestures\n   - Pinch/zoom operations\n   - Long press interactions\n\n5. **Storage Events**:\n   - LocalStorage/SessionStorage changes\n   - Cookie modifications\n   - IndexedDB operations\n\nRecording:\n".concat(recording, "\n\nGenerate snippets that accurately reproduce these complex interactions.");
}
/**
 * Generate a prompt for creating flow understanding from DOM snapshots
 */
function generateFlowAnalysisPrompt(domSnapshots) {
    return "# Analyze Application Flow from DOM Snapshots\n\nYou have DOM snapshots taken every 3 seconds during the recording. Use these to:\n\n1. **Identify Page States**:\n   - Login screens vs authenticated states\n   - Form states (empty, partial, complete)\n   - Loading vs loaded states\n   - Error vs success states\n\n2. **Detect Dynamic Content**:\n   - Elements that appear/disappear\n   - Content that changes between snapshots\n   - AJAX-loaded sections\n   - Progressive disclosure patterns\n\n3. **Find Validation Points**:\n   - Success messages\n   - Error indicators\n   - Progress indicators\n   - State confirmations\n\n4. **Map Navigation Flow**:\n   - URL changes\n   - Single-page app transitions\n   - Modal/dialog sequences\n   - Tab/accordion expansions\n\nDOM Snapshots:\n".concat(JSON.stringify(domSnapshots, null, 2), "\n\nReturn a flow analysis with key transition points and validation selectors.");
}
/**
 * Generate a validation prompt to verify Intent Spec quality
 */
function generateSnippetValidationPrompt(intentSpec) {
    return "# Intent Spec Validation\n\nValidate this Intent Spec for snippet-first execution strategy:\n\n".concat(JSON.stringify(intentSpec, null, 2), "\n\n## Validation Criteria\n\nCheck and report on:\n\n1. **Snippet Coverage**: What percentage of steps use \"snippet\" vs \"ai\"?\n2. **Snippet Validity**: Are all snippets valid, executable Playwright code?\n3. **Selector Stability**: Do selectors follow the stability priority order?\n4. **Pre-Flight Coverage**: Do interactive steps have preFlightChecks?\n5. **Skip Logic**: Are skip conditions properly defined?\n6. **Error Recovery**: Is recovery strategy defined for critical steps?\n7. **AI Usage**: Is AI only used for appropriate complex tasks?\n\n## Return Format\n\n```json\n{\n  \"isValid\": true/false,\n  \"snippetCoverage\": \"92%\",\n  \"issues\": [\n    {\n      \"stepIndex\": 3,\n      \"issue\": \"Missing preFlightChecks\",\n      \"severity\": \"medium\",\n      \"suggestion\": \"Add selector verification\"\n    }\n  ],\n  \"improvements\": [\n    \"Consider adding alternativeSelectors for step 5\",\n    \"Step 7 could use snippet instead of AI\"\n  ],\n  \"score\": 85\n}\n```\n");
}
/**
 * Generate a prompt for extracting variables with proper naming from recording
 */
function generateVariableExtractionPrompt(recording) {
    return "# Extract Variables with UI-Compatible Names\n\nAnalyze this recording and identify all dynamic values that should become variables.\n\nCRITICAL: Use these exact variable names for UI compatibility:\n- PASSWORD (for password fields)\n- EMAIL_ADDRESS (for email inputs)  \n- USERNAME (for username/login fields)\n- FIRST_NAME (for first name fields)\n- LAST_NAME (for last name fields)\n- PHONE_NUMBER (for phone inputs)\n- COMPANY_NAME (for company/organization)\n- DEPARTMENT (for department/division)\n- EMPLOYEE_ID (for employee identifiers)\n- ORDER_ID (for order numbers)\n- TRANSACTION_ID (for transaction references)\n- SEARCH_QUERY (for search inputs)\n- DATE (for date inputs)\n- AMOUNT (for monetary values)\n- QUANTITY (for numeric quantities)\n\nRecording:\n".concat(recording, "\n\nReturn JSON with detected variables:\n{\n  \"variables\": [\n    {\n      \"name\": \"EMAIL_ADDRESS\",\n      \"detectedValue\": \"user@example.com\",\n      \"fieldSelector\": \"#email-input\",\n      \"fieldType\": \"email\",\n      \"isRequired\": true,\n      \"description\": \"User's email address for login\"\n    }\n  ],\n  \"flowContext\": \"Login flow with email and password authentication\",\n  \"suggestedDefaults\": {\n    \"EMAIL_ADDRESS\": \"test@example.com\",\n    \"PASSWORD\": \"SecurePass123\"\n  }\n}");
}
/**
 * Generate a prompt for runtime decision making (skip/retry/fallback)
 */
function generateRuntimeDecisionPrompt(step, error, pageState) {
    return "# Runtime Execution Decision\n\n## Current Situation\nStep: ".concat(step.name, "\nSnippet: ").concat(step.snippet, "\nError: ").concat(error, "\n\n## Page State\nURL: ").concat(pageState.url, "\nTitle: ").concat(pageState.title, "\nReady State: ").concat(pageState.readyState, "\n\n## Decision Required\n\nBased on the error and page state, recommend the best action:\n\n1. **retry**: Simple retry with same snippet\n2. **wait_retry**: Wait 5 seconds then retry\n3. **use_alternative**: Try alternative selector\n4. **use_ai**: Switch to AI execution\n5. **skip**: Skip this step (if optional)\n6. **refresh_retry**: Refresh page and retry\n7. **navigate_back**: Go back and try different path\n\nReturn ONLY JSON:\n```json\n{\n  \"action\": \"retry|wait_retry|use_alternative|use_ai|skip|refresh_retry|navigate_back\",\n  \"confidence\": 0.85,\n  \"reason\": \"Brief explanation\",\n  \"implementation\": \"Specific code or instruction if applicable\"\n}\n```\n");
}
