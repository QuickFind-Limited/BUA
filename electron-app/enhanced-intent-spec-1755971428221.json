{
  "name": "Create Inventory Item in Zoho Inventory",
  "description": "Navigate to Zoho Inventory, log in, and create a new inventory item with name, selling price, and cost price",
  "url": "https://www.google.com/?zx=1755968238395&no_sw_cr=1",
  "params": [
    "EMAIL_ADDRESS",
    "PASSWORD",
    "ITEM_NAME",
    "SELLING_PRICE",
    "COST_PRICE"
  ],
  "environment": {
    "viewport": {
      "width": 1920,
      "height": 1080
    },
    "userAgent": "Not captured",
    "cookies": false,
    "localStorage": false
  },
  "skipNavigationStates": [
    "authenticated",
    "dashboard"
  ],
  "steps": [
    {
      "name": "Navigate to Zoho Inventory Login",
      "ai_instruction": "Navigate to Zoho Inventory login page and wait for page to load",
      "snippet": "await page.goto('https://inventory.zoho.com'); await page.waitForLoadState('networkidle');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "input[name='LOGIN_ID']",
        "#login_id",
        "input[type='email']",
        "input[placeholder*='email']",
        "[data-testid='email-input']",
        ".login-email",
        "//input[@name='LOGIN_ID']"
      ],
      "preFlightChecks": [
        {
          "selector": "input[name='LOGIN_ID']",
          "required": true,
          "alternativeSelectors": [
            "#login_id",
            "input[type='email']"
          ],
          "waitFor": "visible",
          "timeout": 10000
        }
      ],
      "skipConditions": [
        {
          "type": "url_match",
          "value": "inventory.zoho.com/app/",
          "skipReason": "Already logged in to Zoho Inventory"
        },
        {
          "type": "element_exists",
          "value": ".user-menu, #logout-btn, .profile-dropdown",
          "skipReason": "User menu visible indicating logged in state"
        }
      ],
      "waitBefore": {
        "type": "time",
        "condition": "page_load",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "element",
        "condition": "visible",
        "timeout": 5000
      },
      "validation": {
        "type": "element",
        "expected": "login form visible",
        "screenshot": true,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 2000,
        "skipOnError": false,
        "alternativeAction": "refresh_and_retry",
        "fallbackSelectors": [
          "#login_id",
          "input[type='email']",
          ".login-email"
        ]
      },
      "performance": {
        "expectedDuration": 5000,
        "maxDuration": 15000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Enter Email Address",
      "ai_instruction": "Fill in the email address field with the provided EMAIL_ADDRESS parameter",
      "snippet": "await page.fill('input[name=\"LOGIN_ID\"]', '{{EMAIL_ADDRESS}}');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "input[name='LOGIN_ID']",
        "#login_id",
        "input[type='email']",
        "input[placeholder*='email']",
        "[data-testid='email-input']",
        ".login-email",
        "//input[@name='LOGIN_ID']"
      ],
      "value": "{{EMAIL_ADDRESS}}",
      "preFlightChecks": [
        {
          "selector": "input[name='LOGIN_ID']",
          "required": true,
          "alternativeSelectors": [
            "#login_id",
            "input[type='email']"
          ],
          "waitFor": "visible",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "time",
        "condition": "input_processed",
        "timeout": 1000
      },
      "validation": {
        "type": "element",
        "expected": "field contains entered email",
        "screenshot": false,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 1500,
        "skipOnError": false,
        "alternativeAction": "clear_and_retry",
        "fallbackSelectors": [
          "#login_id",
          "input[type='email']",
          ".login-email"
        ]
      },
      "performance": {
        "expectedDuration": 2000,
        "maxDuration": 6000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Enter Password",
      "ai_instruction": "Fill in the password field with the provided PASSWORD parameter",
      "snippet": "await page.fill('input[name=\"PASSWORD\"]', '{{PASSWORD}}');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "input[name='PASSWORD']",
        "#password",
        "input[type='password']",
        "input[placeholder*='password']",
        "[data-testid='password-input']",
        ".login-password",
        "//input[@name='PASSWORD']"
      ],
      "value": "{{PASSWORD}}",
      "preFlightChecks": [
        {
          "selector": "input[name='PASSWORD']",
          "required": true,
          "alternativeSelectors": [
            "#password",
            "input[type='password']"
          ],
          "waitFor": "visible",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "time",
        "condition": "input_processed",
        "timeout": 1000
      },
      "validation": {
        "type": "element",
        "expected": "password field filled",
        "screenshot": false,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 1500,
        "skipOnError": false,
        "alternativeAction": "clear_and_retry",
        "fallbackSelectors": [
          "#password",
          "input[type='password']",
          ".login-password"
        ]
      },
      "performance": {
        "expectedDuration": 2000,
        "maxDuration": 6000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Click Login Button",
      "ai_instruction": "Click the login or sign in button to authenticate",
      "snippet": "await page.click('button[type=\"submit\"], input[type=\"submit\"], .login-button, #login-btn');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "button[type='submit']",
        "input[type='submit']",
        ".login-button",
        "#login-btn",
        "button:has-text('Sign In')",
        "button:has-text('Login')",
        "[aria-label*='login']",
        "//button[contains(text(), 'Sign In')]"
      ],
      "preFlightChecks": [
        {
          "selector": "button[type='submit']",
          "required": true,
          "alternativeSelectors": [
            "input[type='submit']",
            ".login-button"
          ],
          "waitFor": "enabled",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "network",
        "condition": "navigation_complete",
        "timeout": 10000
      },
      "validation": {
        "type": "url",
        "expected": "inventory.zoho.com/app/",
        "screenshot": true,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 2000,
        "skipOnError": false,
        "alternativeAction": "refresh_and_retry",
        "fallbackSelectors": [
          "input[type='submit']",
          ".login-button",
          "#login-btn"
        ]
      },
      "performance": {
        "expectedDuration": 8000,
        "maxDuration": 20000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Navigate to Items Section",
      "ai_instruction": "Navigate to the Items/Inventory section from the dashboard",
      "snippet": "await page.click('a[href*=\"items\"], .items-menu, #items-link');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "a[href*='items']",
        ".items-menu",
        "#items-link",
        "text=Items",
        "[data-testid='items-nav']",
        ".nav-items",
        "//a[contains(@href, 'items')]",
        "//a[contains(text(), 'Items')]"
      ],
      "preFlightChecks": [
        {
          "selector": "a[href*='items']",
          "required": true,
          "alternativeSelectors": [
            ".items-menu",
            "text=Items"
          ],
          "waitFor": "visible",
          "timeout": 8000
        }
      ],
      "skipConditions": [
        {
          "type": "url_match",
          "value": "/items",
          "skipReason": "Already on items page"
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "visible",
        "timeout": 5000
      },
      "waitAfter": {
        "type": "network",
        "condition": "page_loaded",
        "timeout": 8000
      },
      "validation": {
        "type": "url",
        "expected": "contains /items",
        "screenshot": false,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 2000,
        "skipOnError": false,
        "alternativeAction": "search_for_items_menu",
        "fallbackSelectors": [
          ".items-menu",
          "text=Items",
          "#items-link"
        ]
      },
      "performance": {
        "expectedDuration": 5000,
        "maxDuration": 15000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Click Add New Item Button",
      "ai_instruction": "Click the button to add or create a new inventory item",
      "snippet": "await page.click('button:has-text(\"New Item\"), .add-item-btn, #add-new-item');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "button:has-text('New Item')",
        ".add-item-btn",
        "#add-new-item",
        "button:has-text('Add Item')",
        "[data-testid='add-item']",
        ".new-item-button",
        "//button[contains(text(), 'New Item')]",
        "//button[contains(text(), 'Add')]"
      ],
      "preFlightChecks": [
        {
          "selector": "button:has-text('New Item')",
          "required": true,
          "alternativeSelectors": [
            ".add-item-btn",
            "#add-new-item"
          ],
          "waitFor": "visible",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "network",
        "condition": "form_loaded",
        "timeout": 8000
      },
      "validation": {
        "type": "url",
        "expected": "contains /new",
        "screenshot": true,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 2000,
        "skipOnError": false,
        "alternativeAction": "look_for_plus_button",
        "fallbackSelectors": [
          ".add-item-btn",
          "button:has-text('Add Item')",
          "[data-testid='add-item']"
        ]
      },
      "performance": {
        "expectedDuration": 5000,
        "maxDuration": 15000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Enter Item Name",
      "ai_instruction": "Fill in the item name field with the provided ITEM_NAME parameter",
      "snippet": "await page.fill('#a516721c3, input[name*=\"name\"], .item-name-input', '{{ITEM_NAME}}');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "#a516721c3",
        "input[name*='name']",
        ".item-name-input",
        "input[placeholder*='name']",
        "[data-testid='item-name']",
        ".name-field",
        "//input[@id='a516721c3']",
        "//input[contains(@name, 'name')]"
      ],
      "value": "{{ITEM_NAME}}",
      "preFlightChecks": [
        {
          "selector": "#a516721c3",
          "required": true,
          "alternativeSelectors": [
            "input[name*='name']",
            ".item-name-input"
          ],
          "waitFor": "visible",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "time",
        "condition": "input_processed",
        "timeout": 1000
      },
      "validation": {
        "type": "element",
        "expected": "field contains item name",
        "screenshot": false,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 1500,
        "skipOnError": false,
        "alternativeAction": "clear_and_retry",
        "fallbackSelectors": [
          "input[name*='name']",
          ".item-name-input",
          ".name-field"
        ]
      },
      "performance": {
        "expectedDuration": 2000,
        "maxDuration": 6000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Enter Selling Price",
      "ai_instruction": "Fill in the selling price field with the provided SELLING_PRICE parameter",
      "snippet": "await page.fill('#ab2dbd8a4, input[name*=\"price\"], .selling-price-input', '{{SELLING_PRICE}}');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "#ab2dbd8a4",
        "input[name*='price']",
        ".selling-price-input",
        "input[placeholder*='price']",
        "[data-testid='selling-price']",
        ".price-field",
        "//input[@id='ab2dbd8a4']",
        "//input[contains(@name, 'price')]"
      ],
      "value": "{{SELLING_PRICE}}",
      "preFlightChecks": [
        {
          "selector": "#ab2dbd8a4",
          "required": true,
          "alternativeSelectors": [
            "input[name*='price']",
            ".selling-price-input"
          ],
          "waitFor": "visible",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "time",
        "condition": "input_processed",
        "timeout": 1000
      },
      "validation": {
        "type": "element",
        "expected": "field contains selling price",
        "screenshot": false,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 1500,
        "skipOnError": false,
        "alternativeAction": "clear_and_retry",
        "fallbackSelectors": [
          "input[name*='price']",
          ".selling-price-input",
          ".price-field"
        ]
      },
      "performance": {
        "expectedDuration": 2000,
        "maxDuration": 6000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Enter Cost Price",
      "ai_instruction": "Fill in the cost price field with the provided COST_PRICE parameter",
      "snippet": "await page.fill('#a6a46e8a4, input[name*=\"cost\"], .cost-price-input', '{{COST_PRICE}}');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "#a6a46e8a4",
        "input[name*='cost']",
        ".cost-price-input",
        "input[placeholder*='cost']",
        "[data-testid='cost-price']",
        ".cost-field",
        "//input[@id='a6a46e8a4']",
        "//input[contains(@name, 'cost')]"
      ],
      "value": "{{COST_PRICE}}",
      "preFlightChecks": [
        {
          "selector": "#a6a46e8a4",
          "required": true,
          "alternativeSelectors": [
            "input[name*='cost']",
            ".cost-price-input"
          ],
          "waitFor": "visible",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "time",
        "condition": "input_processed",
        "timeout": 1000
      },
      "validation": {
        "type": "element",
        "expected": "field contains cost price",
        "screenshot": false,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 1500,
        "skipOnError": false,
        "alternativeAction": "clear_and_retry",
        "fallbackSelectors": [
          "input[name*='cost']",
          ".cost-price-input",
          ".cost-field"
        ]
      },
      "performance": {
        "expectedDuration": 2000,
        "maxDuration": 6000,
        "fallbackToAI": true
      }
    },
    {
      "name": "Save Item",
      "ai_instruction": "Click the save or submit button to create the inventory item",
      "snippet": "await page.click('button:has-text(\"Save\"), .save-btn, #save-item, button[type=\"submit\"]');",
      "prefer": "snippet",
      "fallback": "ai",
      "selectors": [
        "button:has-text('Save')",
        ".save-btn",
        "#save-item",
        "button[type='submit']",
        "button:has-text('Create')",
        "[data-testid='save-item']",
        "//button[contains(text(), 'Save')]",
        "//button[@type='submit']"
      ],
      "preFlightChecks": [
        {
          "selector": "button:has-text('Save')",
          "required": true,
          "alternativeSelectors": [
            ".save-btn",
            "button[type='submit']"
          ],
          "waitFor": "enabled",
          "timeout": 5000
        }
      ],
      "waitBefore": {
        "type": "element",
        "condition": "enabled",
        "timeout": 3000
      },
      "waitAfter": {
        "type": "network",
        "condition": "save_complete",
        "timeout": 10000
      },
      "validation": {
        "type": "url",
        "expected": "item successfully created",
        "screenshot": true,
        "continueOnFailure": false
      },
      "errorHandling": {
        "retry": 3,
        "retryDelay": 2000,
        "skipOnError": false,
        "alternativeAction": "check_validation_errors",
        "fallbackSelectors": [
          ".save-btn",
          "button[type='submit']",
          "#save-item"
        ]
      },
      "performance": {
        "expectedDuration": 8000,
        "maxDuration": 20000,
        "fallbackToAI": true
      }
    }
  ],
  "preferences": {
    "dynamic_elements": "ai",
    "simple_steps": "snippet",
    "form_interactions": "snippet",
    "validation": "ai"
  },
  "screenshotValidation": {
    "enabled": true,
    "threshold": 80,
    "checkpoints": [
      "after-login",
      "after-item-creation",
      "final"
    ],
    "ignoreRegions": [
      ".timestamp",
      ".dynamic-content",
      ".notifications"
    ],
    "compareMode": "structural"
  },
  "validations": [
    {
      "step": "after-login",
      "check": "url",
      "expected": "inventory.zoho.com/app/"
    },
    {
      "step": "after-item-creation",
      "check": "element",
      "expected": "success message or item details page"
    },
    {
      "step": "final",
      "check": "screenshot",
      "expected": "matches_recording",
      "threshold": 85
    }
  ],
  "errorRecovery": {
    "strategies": [
      "retry",
      "refresh",
      "restart"
    ],
    "maxAttempts": 3,
    "fallbackToManual": false
  },
  "performance": {
    "totalExpectedDuration": 84031,
    "criticalPath": [
      "login",
      "navigate-items",
      "create-item",
      "save-item"
    ],
    "slowStepThreshold": 10000
  }
}